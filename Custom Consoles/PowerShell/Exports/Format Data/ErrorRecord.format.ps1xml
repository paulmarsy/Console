<?xml version="1.0" encoding="utf-8" ?>
<Configuration>
    <ViewDefinitions>
        <View>
            <Name>ErrorRecord</Name>
            <OutOfBand />
            <ViewSelectedBy>
                <TypeName>System.Management.Automation.ErrorRecord</TypeName>
                <TypeName>System.Management.Automation.RuntimeException</TypeName>
                <TypeName>System.RuntimeTypeHandle</TypeName> 
                <TypeName>System.SystemException</TypeName>
            </ViewSelectedBy>
            <CustomControl>
                <CustomEntries>
                    <CustomEntry>
                        <CustomItem>
                            <ExpressionBinding>
<!-- Callstack:                                                                                                                                      -->
<!-- 0 - The call to Get-PSCallStack                                                                                                                 -->
<!-- 1 - The command which caused this error view, this could be the actual function or looking at it in indirectly i.e. through the $Error array    -->
<!-- 2 - The caller of the function which failed which could be an interactive (runspace origin) prompt or another function                          -->
<!-- Scenarios:                                                                                                                                      -->
<!-- Size = 2 & command's origin is internal = The function failed within the workings of the code so should show full error details                 -->
<!-- Size = 2 & command's origin is runspace = Error is generated by the prompt so show a custom message                                             -->
<!-- Size = 3 & command's origin is runspace = Error is generated within the first cmdlet called by the user so show a custom prompt                 -->
<!-- Size = 4+ = The function failed within the workings of the code so should show full error details                                               -->
                            	<ScriptBlock>
                                    $PSItemrecord = $PSItem
                                    
                                    function Limit-MessageLength {
                                        param($Message)
                                        
                                        $Block = [string]::Empty
                                        do {
                                            if ($Message.Lengh -gt 80) { $i = 80 }
                                            else { $i = $Message.Length }
                                            
                                            $Block += "{0}{1}" -f $Message.Substring(0, $i), [Environment]::NewLine
                                            $Message = $Message.Substring($i, ($Message.Length) - $1)
                                        }
                                        while ($i -gt 0)
                                        
                                        return $Block
                                    }
                                    
                                    $callStack = Get-PSCallStack
                                    $callStackSize = $callStack | Measure-Object -Line | Select-Object -ExpandProperty Lines
                                    $errorViewCallerOrigin = $callStack | Select-Object -Skip 1 -First 1 | % InvocationInfo | % CommandOrigin
                                    if ($callStackSize -gt 4 -or  ($callStackSize -eq 2 -and $errorViewCallerOrigin -eq [System.Management.Automation.CommandOrigin]::Internal)) {
                                        $PSItemrecord | Format-All | Out-Default
                                    } else {                                    
                                        switch -wildcard ($PSItemrecord.FullyQualifiedErrorId)
                                        {
                                            "CommandNotFoundException" { "Command not found: {0}" -f $PSItemrecord.TargetObject }
                                            "System.Security.SecurityException,*" { "You do not have access to perform the requested action ('Run As Administrator'?), error details:{0}{1}" -f ([System.Environment]::NewLine), (Limit-MessageLength $PSItemrecord.Exception.Message) }
                                            "CannotConvertArgumentNoMessage,*" { "Incorrect argument '{0}', error details:{1}{2}" -f $PSItemrecord.Exception.ParameterName, ([System.Environment]::NewLine), (Limit-MessageLength $PSItemrecord.Exception.Message) }
                                            "ParameterArgumentValidationError,*" { "Incorrect argument '{0}', error details:{1}{2}" -f $PSItemrecord.Exception.ParameterName, ([System.Environment]::NewLine), (Limit-MessageLength $PSItemrecord.Exception.Message) }
                                            default { $PSItemrecord | Format-All | Out-Default }
                                        }
                                    }
                                </ScriptBlock>
                            </ExpressionBinding>
                        </CustomItem>
                    </CustomEntry>
                </CustomEntries>
            </CustomControl>
        </View>
    </ViewDefinitions>
</Configuration>