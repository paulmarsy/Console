{
  "name": "fs-plus",
  "version": "2.8.1",
  "description": "node's fs with more helpers",
  "main": "./lib/fs-plus.js",
  "scripts": {
    "prepublish": "grunt prepublish",
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom/fs-plus.git"
  },
  "bugs": {
    "url": "https://github.com/atom/fs-plus/issues"
  },
  "homepage": "http://atom.github.io/fs-plus",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/fs-plus/raw/master/LICENSE.md"
    }
  ],
  "keywords": [
    "fs",
    "filesystem"
  ],
  "devDependencies": {
    "jasmine-focused": "1.x",
    "grunt-contrib-coffee": "~0.9.0",
    "grunt-cli": "~0.1.8",
    "grunt": "~0.4.1",
    "grunt-shell": "~0.2.2",
    "grunt-coffeelint": "0.0.6",
    "temp": "~0.8.1"
  },
  "dependencies": {
    "underscore-plus": "1.x",
    "mkdirp": "~0.3.5",
    "rimraf": "~2.2.2",
    "async": "~0.2.9"
  },
  "readme": "# fs plus [![Build Status](https://travis-ci.org/atom/fs-plus.svg?branch=master)](https://travis-ci.org/atom/fs-plus)\n\nYet another filesystem helper based on node's [fs](http://nodejs.org/api/fs.html)\nmodule.  This library exports everything from node's fs module but with some\nextra helpers.\n\n## Using\n\n```sh\nnpm install fs-plus\n```\n\n```coffee\nfs = require 'fs-plus'\n```\n\n## Documentation\n\n### `getHomeDirectory()`\nReturns the absolute path to the home directory.\n\n### `absolute(relativePath)`\nMake the given path absolute by resolving it against the current\nworking directory.\n\n### Params\n\n - **String** `relativePath`: The string representing the relative path. If the\n   path is prefixed with '~', it will be expanded to the current user's home\n   directory.\n\n### Return\n\n - **String**: The absolute path or the relative path if it's unable to\n   determine its real path.\n\n### `normalize(pathToNormalize)`\nNormalize the given path treating a leading `~` segment as referring to the\nhome directory. This method does not query the filesystem.\n\n#### Params\n\n - **String** `pathToNormalize`: The string containing the abnormal path. If the\n   path is prefixed with '~', it will be expanded to the current user's home\n   directory.\n\n#### Return\n - **String** Returns a normalized path.\n\n### `getAppDataDirectory()`\nGet path to store application specific data.\n\n#### Return\n - **String** Returns the absolute path or null if platform isn't supported\n\n    - Mac: `~/Library/Application Support/`\n    - Win: `%AppData%`\n    - Linux: `/var/lib`\n\n### `isAbsolute(pathToCheck)`\nIs the given path absolute?\n\n#### Params\n - **String** `pathToCheck`: The relative or absolute path to check.\n\n#### Return\n - **Bolean** Returns `true` if the path is absolute, `false` otherwise.\n\n### `existsSync(pathToCheck)`\nReturns `true` if a file or folder at the specified path exists.\n\n### `isDirectorySync(directoryPath)`\nReturns `true` if the given path exists and is a directory.\n\n### `isDirectory(directoryPath)`\nAsynchronously checks that the given path exists and is a directory.\n\n### `isFileSync(filePath)`\nReturns true if the specified path exists and is a file.\n\n### `isSymbolicLinkSync(symlinkPath)`\nReturns `true` if the specified path is a symbolic link.\n\n### `isSymbolicLink(symlinkPath, callback)`\nCalls back with `true` if the specified path is a symbolic link.\n\n### `isExecutableSync(pathToCheck)`\nReturns `true` if the specified path is executable.\n\n### `getSizeSync(pathToCheck)`\nReturns the size of the specified path.\n\n### `listSync(rootPath, extensions)`\nReturns an Array with the paths of the files and directories\ncontained within the directory path. It is not recursive.\n\n## Params\n - **String** `rootPath`: The absolute path to the directory to list.\n - **Array** `extensions`: An array of extensions to filter the results by. If none are\n   given, none are filtered (optional).\n\n### `list(rootPath, extensions)`\nAsynchronously lists the files and directories in the given path. The listing is not recursive.\n\n### `listTreeSync(rootPath)`\nGet all paths under the given path.\n\n#### Params\n - **String** `rootPath` The {String} path to start at.\n\n#### Return\n - **Array** Returns an array of strings under the given path.\n\n### `moveSync(source, target)`\nMoves the file or directory to the target synchronously.\n\n### `removeSync(pathToRemove)`\nRemoves the file or directory at the given path synchronously.\n\n### `writeFileSync(filePath, content, options)`\nOpen, write, flush, and close a file, writing the given content synchronously.\nIt also creates the necessary parent directories.\n\n### `writeFile(filePath, content, options, callback)`\nOpen, write, flush, and close a file, writing the given content\nasynchronously.\nIt also creates the necessary parent directories.\n\n### `copySync(sourcePath, destinationPath)`\nCopies the given path recursively and synchronously.\n\n### `makeTreeSync(directoryPath)`\nCreate a directory at the specified path including any missing\nparent directories synchronously.\n\n### `makeTree(directoryPath, callback)`\nCreate a directory at the specified path including any missing\nparent directories asynchronously.\n\n### `traverseTreeSync(rootPath, onFile, onDirectory)`\nRecursively walk the given path and execute the given functions\nsynchronously.\n\n#### Params\n - **String** `rootPath`: The string containing the directory to recurse into.\n - **Function** `onFile`: The function to execute on each file, receives a single argument\n   the absolute path.\n - **Function** `onDirectory`: The function to execute on each directory, receives a single\n   argument the absolute path (defaults to onFile). If this\n   function returns a falsy value then the directory is not\n   entered.\n\n### `traverseTree(rootPath, onFile, onDirectory, onDone)`\nPublic: Recursively walk the given path and execute the given functions\nasynchronously.\n\n### `md5ForPath(pathToDigest)`\nHashes the contents of the given file.\n\n#### Params\n - **String** `pathToDigest`: The string containing the absolute path.\n\n#### Return\n - **String** Returns a string containing the MD5 hexadecimal hash.\n\n### `resolve(loadPaths, pathToResolve, extensions)`\nFinds a relative path among the given array of paths.\n\n#### Params\n - **Array** `loadPaths`: An array of absolute and relative paths to search.\n - **String** `pathToResolve` The string containing the path to resolve.\n - **Array** `extensions` An array of extensions to pass to {resolveExtensions} in\n   which case pathToResolve should not contain an extension\n   (optional).\n\n#### Return\nReturns the absolute path of the file to be resolved if it's found and\nundefined otherwise.\n\n### `resolveOnLoadPath()`\nLike `.resolve` but uses node's modules paths as the load paths to\nsearch.\n\n### `resolveExtension(pathToResolve, extensions)`\nFinds the first file in the given path which matches the extension\nin the order given.\n\n#### Params\n - **String** `pathToResolve`: the string containing relative or absolute path of the\n   file in question without the extension or '.'.\n - **Array** `extensions`: the ordered array of extensions to try.\n\n#### Return\nReturns the absolute path of the file if it exists with any of the given\nextensions, otherwise it's undefined.\n\n### `isCompressedExtension(ext)`\nReturns true for extensions associated with compressed files.\n\n### `isImageExtension(ext)`\nReturns true for extensions associated with image files.\n\n### `isPdfExtension(ext)`\nReturns true for extensions associated with pdf files.\n\n### `isBinaryExtension(ext)`\nReturns true for extensions associated with binary files.\n\n### `isReadmePath(readmePath)`\nReturns true for files named similarily to 'README'\n\n### `isMarkdownExtension(ext)`\nReturns true for extensions associated with Markdown files.\n\n### `isCaseInsensitive()`\nIs the filesystem case insensitive?\nReturns `true` if case insensitive, `false` otherwise.\n\n### `isCaseSensitive()`\nIs the filesystem case sensitive?\nReturns `true` if case sensitive, `false` otherwise.\n",
  "readmeFilename": "README.md",
  "_id": "fs-plus@2.8.1",
  "_from": "fs-plus@>=2.0.0 <3.0.0"
}
