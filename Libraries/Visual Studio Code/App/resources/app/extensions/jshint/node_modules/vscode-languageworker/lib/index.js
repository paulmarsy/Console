/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
'use strict';
var languageWorkerError_1 = require('./languageWorkerError');
exports.LanguageWorkerError = languageWorkerError_1.LanguageWorkerError;
exports.MessageKind = languageWorkerError_1.MessageKind;
var protocol_1 = require('./protocol');
exports.FileChangeType = protocol_1.FileChangeType;
exports.Severity = protocol_1.Severity;
var connection_1 = require('./connection');
// ------------- Reexport the API surface of the language worker API ----------------------
var fm = require('./files');
var Files;
(function (Files) {
    Files.uriToFilePath = fm.uriToFilePath;
    Files.resolveModule = fm.resolveModule;
})(Files = exports.Files || (exports.Files = {}));
// -------------- validator open tools protocol -------------------
function runSingleFileValidator(inputStream, outputStream, handler) {
    var connection = getValidationWorkerConnection(inputStream, outputStream);
    var rootFolder;
    var shutdownReceived;
    inputStream.on('end', function () {
        process.exit(shutdownReceived ? 0 : 1);
    });
    inputStream.on('close', function () {
        process.exit(shutdownReceived ? 0 : 1);
    });
    var Document = (function () {
        function Document(uri, content) {
            this._uri = uri;
            this._content = content;
        }
        Object.defineProperty(Document.prototype, "uri", {
            get: function () {
                return this._uri;
            },
            enumerable: true,
            configurable: true
        });
        Document.prototype.getText = function () {
            return this._content;
        };
        Document.prototype.setText = function (content) {
            this._content = content;
        };
        return Document;
    })();
    var trackedDocuments = Object.create(null);
    var changedDocuments = Object.create(null);
    var ValidationRequestor = (function () {
        function ValidationRequestor() {
            this._toValidate = Object.create(null);
        }
        Object.defineProperty(ValidationRequestor.prototype, "toValidate", {
            get: function () {
                var _this = this;
                return Object.keys(this._toValidate).map(function (key) { return _this._toValidate[key]; });
            },
            enumerable: true,
            configurable: true
        });
        ValidationRequestor.prototype.all = function () {
            var _this = this;
            Object.keys(trackedDocuments).forEach(function (key) { return _this._toValidate[key] = trackedDocuments[key]; });
        };
        ValidationRequestor.prototype.single = function (uri) {
            var document = trackedDocuments[uri];
            if (document) {
                this._toValidate[uri] = document;
            }
            return !!document;
        };
        return ValidationRequestor;
    })();
    var ErrorMessageTracker = (function () {
        function ErrorMessageTracker() {
            this.messages = Object.create(null);
        }
        ErrorMessageTracker.prototype.add = function (message) {
            var count = this.messages[message];
            if (!count) {
                count = 0;
            }
            count++;
            this.messages[message] = count;
        };
        ErrorMessageTracker.prototype.publish = function (connection) {
            Object.keys(this.messages).forEach(function (message) {
                connection.publishShowMessage({ message: message, severity: protocol_1.MessageSeverity.Error });
            });
        };
        return ErrorMessageTracker;
    })();
    function isFunction(arg) {
        return Object.prototype.toString.call(arg) === '[object Function]';
    }
    function isArray(array) {
        if (Array.isArray) {
            return Array.isArray(array);
        }
        if (array && typeof (array.length) === 'number' && array.constructor === Array) {
            return true;
        }
        return false;
    }
    function doProcess(result, complete, error) {
        if (isFunction(result.then)) {
            return result.then(complete, error);
        }
        else {
            return complete(result);
        }
    }
    function safeRunner(values, func) {
        var messageTracker = new ErrorMessageTracker();
        var runSingle = function (value) {
            try {
                func(value);
            }
            catch (error) {
                if (error instanceof languageWorkerError_1.LanguageWorkerError) {
                    var workerError = error;
                    switch (workerError.messageKind) {
                        case languageWorkerError_1.MessageKind.Show:
                            messageTracker.add(workerError.message);
                            break;
                        case languageWorkerError_1.MessageKind.Log:
                            logSafeRunnerMessage(workerError.message);
                            break;
                    }
                }
                else {
                    logSafeRunnerMessage(error.message);
                }
            }
        };
        if (isArray(values)) {
            for (var _i = 0, _a = values; _i < _a.length; _i++) {
                var value = _a[_i];
                runSingle(value);
            }
        }
        else {
            runSingle(values);
        }
        messageTracker.publish(connection);
    }
    function logSafeRunnerMessage(message) {
        if (message) {
            connection.publishLogMessage({ severity: protocol_1.MessageSeverity.Error, message: "Safe Runner failed with message: " + message });
        }
        else {
            connection.publishLogMessage({ severity: protocol_1.MessageSeverity.Error, message: 'Safe Runner failed unexpectedly.' });
        }
    }
    function validate(document) {
        var result = handler.validate(document);
        doProcess(result, function (diagnostics) {
            connection.publishDiagnostics({
                uri: document.uri,
                diagnostics: diagnostics
            });
        }, function (error) {
            // We need a log event to tell the client that a diagnostic
            // failed.
        });
    }
    function createInitializeResponse(initArgs) {
        var resultCapabilities = {};
        if (initArgs.capabilities.validation) {
            resultCapabilities.validation = true;
        }
        return { success: true, body: { capabilities: resultCapabilities } };
    }
    connection.onInitialize(function (initArgs) {
        rootFolder = initArgs.rootFolder;
        if (isFunction(handler.initialize)) {
            return doProcess(handler.initialize(rootFolder), function (response) {
                if (response && !response.success) {
                    return response;
                }
                else {
                    return createInitializeResponse(initArgs);
                }
            });
        }
        else {
            return createInitializeResponse(initArgs);
        }
    });
    connection.onShutdown(function (shutdownArgs) {
        if (isFunction(handler.shutdown)) {
            handler.shutdown();
        }
        return { success: true };
    });
    connection.onExit(function () {
        process.exit(0);
    });
    connection.onDidOpenDocument(function (event) {
        var document = new Document(event.uri, event.content);
        trackedDocuments[event.uri] = document;
        process.nextTick(function () { return safeRunner(document, validate); });
    });
    connection.onDidChangeDocument(function (event) {
        var document = trackedDocuments[event.uri];
        if (document) {
            document.setText(event.content);
            process.nextTick(function () { return safeRunner(document, validate); });
        }
    });
    connection.onDidCloseDocumet(function (event) {
        delete trackedDocuments[event.uri];
    });
    connection.onDidChangeConfiguration(function (eventBody) {
        var settings = eventBody.settings;
        var requestor = new ValidationRequestor();
        if (isFunction(handler.onConfigurationChange)) {
            handler.onConfigurationChange(settings, requestor);
        }
        else {
            requestor.all();
        }
        process.nextTick(function () { return safeRunner(requestor.toValidate, validate); });
    });
    connection.onDidChangeFiles(function (args) {
        var requestor = new ValidationRequestor();
        if (isFunction(handler.onFileEvents)) {
            handler.onFileEvents(args.changes, requestor);
        }
        else {
            requestor.all();
        }
        process.nextTick(function () { return safeRunner(requestor.toValidate, validate); });
    });
}
exports.runSingleFileValidator = runSingleFileValidator;
var Logger = (function () {
    function Logger() {
    }
    Logger.prototype.attach = function (connection) {
        this.connection = connection;
    };
    Logger.prototype.error = function (message) {
        this.send(protocol_1.MessageSeverity.Error, message);
    };
    Logger.prototype.log = function (message) {
        this.send(protocol_1.MessageSeverity.Warning, message);
    };
    Logger.prototype.info = function (message) {
        this.send(protocol_1.MessageSeverity.Info, message);
    };
    Logger.prototype.send = function (severity, message) {
        if (this.connection) {
            this.connection.sendEvent(protocol_1.LogMessageEvent.type, { severity: severity, message: message });
        }
    };
    return Logger;
})();
function getValidationWorkerConnection(inputStream, outputStream) {
    var logger = new Logger();
    var connection = connection_1.connectWorker(inputStream, outputStream, logger);
    logger.attach(connection);
    return {
        onInitialize: function (handler) { return connection.onRequest(protocol_1.InitializeRequest.type, handler); },
        onShutdown: function (handler) { return connection.onRequest(protocol_1.ShutdownRequest.type, handler); },
        onExit: function (handler) { return connection.onEvent(protocol_1.ExitEvent.type, handler); },
        onDidChangeConfiguration: function (handler) { return connection.onEvent(protocol_1.DidChangeConfigurationEvent.type, handler); },
        onDidOpenDocument: function (handler) { return connection.onEvent(protocol_1.DidOpenDocumentEvent.type, handler); },
        onDidChangeDocument: function (handler) { return connection.onEvent(protocol_1.DidChangeDocumentEvent.type, handler); },
        onDidCloseDocumet: function (handler) { return connection.onEvent(protocol_1.DidCloseDocumentEvent.type, handler); },
        onDidChangeFiles: function (handler) { return connection.onEvent(protocol_1.DidChangeFilesEvent.type, handler); },
        publishDiagnostics: function (args) { return connection.sendEvent(protocol_1.PublishDiagnosticsEvent.type, args); },
        publishLogMessage: function (args) { return connection.sendEvent(protocol_1.LogMessageEvent.type, args); },
        publishShowMessage: function (args) { return connection.sendEvent(protocol_1.ShowMessageEvent.type, args); },
        dispose: function () { return connection.dispose(); }
    };
}
function getValidationClientConnection(inputStream, outputStream) {
    var logger = new Logger();
    var connection = connection_1.connectClient(inputStream, outputStream, logger);
    logger.attach(connection);
    return {
        initialize: function (args) { return connection.sendRequest(protocol_1.InitializeRequest.type, args); },
        shutdown: function (args) { return connection.sendRequest(protocol_1.ShutdownRequest.type, args); },
        exit: function () { return connection.sendEvent(protocol_1.ExitEvent.type); },
        publishConfigurationDidChange: function (args) { return connection.sendEvent(protocol_1.DidChangeConfigurationEvent.type, args); },
        publishDocumentDidOpen: function (args) { return connection.sendEvent(protocol_1.DidOpenDocumentEvent.type, args); },
        publishDocumentDidChange: function (args) { return connection.sendEvent(protocol_1.DidChangeDocumentEvent.type, args); },
        publishDocumentDidClose: function (args) { return connection.sendEvent(protocol_1.DidCloseDocumentEvent.type, args); },
        publishFilesDidChange: function (args) { return connection.sendEvent(protocol_1.DidChangeFilesEvent.type, args); },
        onDiagnosticEvent: function (handler) { return connection.onEvent(protocol_1.PublishDiagnosticsEvent.type, handler); },
        onLogMessage: function (handler) { return connection.onEvent(protocol_1.LogMessageEvent.type, handler); },
        onShowMessage: function (handler) { return connection.onEvent(protocol_1.ShowMessageEvent.type, handler); },
        dispose: function () { return connection.dispose(); }
    };
}
