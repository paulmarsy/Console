import { LanguageWorkerError, MessageKind } from './languageWorkerError';
import { Response } from './messages';
import { InitializeResponse, FileEvent, FileChangeType, Diagnostic, Severity, Position } from './protocol';
export { Response, InitializeResponse, Diagnostic, Severity, Position, FileEvent, FileChangeType };
export { LanguageWorkerError, MessageKind };
import * as fm from './files';
export declare namespace Files {
    let uriToFilePath: typeof fm.uriToFilePath;
    let resolveModule: typeof fm.resolveModule;
}
export declare type Result<T> = T | Thenable<T>;
export interface IDocument {
    uri: string;
    getText(): string;
}
export interface IValidationRequestor {
    all(): void;
}
export interface SingleFileValidator {
    initialize?(rootFolder: string): Result<InitializeResponse>;
    validate(document: IDocument): Result<Diagnostic[]>;
    onConfigurationChange?(settings: any, requestor: IValidationRequestor): void;
    onFileEvents?(changes: FileEvent[], requestor: IValidationRequestor): void;
    shutdown?(): void;
}
export declare function runSingleFileValidator(inputStream: NodeJS.ReadableStream, outputStream: NodeJS.WritableStream, handler: SingleFileValidator): void;
